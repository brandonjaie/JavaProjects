<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- Expression Handler bean definition START -->
    <beans:bean id="webexpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <!-- Expression Handler bean definition END -->
    
    <!-- #2 - Make sure we don’t need authorization to get to the login or home page -->     


    <!-- #3 - Authentication/login form and protected endpoint configuration -->
    <http auto-config="true" use-expressions="true">
        <intercept-url pattern="/home" access="permitAll"/>
        <intercept-url pattern="/rentals" access="permitAll"/>
        <intercept-url pattern="/errors" access="permitAll"/>
        <intercept-url pattern="/error" access="permitAll"/>
        <intercept-url pattern="/" access="permitAll"/>
        <intercept-url pattern="/css/**" access="permitAll"/>
        <intercept-url pattern="/js/**" access="permitAll"/>
        <intercept-url pattern="/img/**" access="permitAll"/>
        <intercept-url pattern="/fonts/**" access="permitAll"/>
        <!-- #3a - Login via html form, use Spring to do the security check -->
        <!-- #3b - Use the login page at this endpoint -->
        <!-- #3c - Redirect here if login fails -->
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/home"
                    authentication-failure-url="/error?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/home"/>
        
<!--        <session-management>
            <concurrency-control max-sessions="1" />
        </session-management>
        
        <session-management>
            <concurrency-control expired-url="/errors" />
        </session-management>
        -->
        <!-- #3e -->

        <intercept-url pattern="/members" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/admin" access="hasAnyRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/profile" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE', 'ROLE_USER')"/>
        
        <intercept-url pattern="/addUserUserProfileNoAjax" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/editUserUserProfileNoAjax" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE', 'ROLE_USER')"/>
         
        <intercept-url pattern="/asset" access="hasAnyRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/assets/{id}" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/assets" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>       
        <intercept-url pattern="search/assets" access="permitAll"/>
               
        <!--        *delete asset and asset record = DELETE | access = ROLE_ADMIN only-->
        <intercept-url pattern="/assetRecordDelete/{id}" access="hasAnyRole('ROLE_ADMIN')"/>
        <!--        get asset record by asset id = GET | access = ROLE_ADMIN and ROLE_EMPLOYEE only-->
        <intercept-url pattern="/assetRecord/{id}" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/assetRecord" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/> 
        <!--        *update asset record = POST    -->
        <intercept-url pattern="/assetRecordUpdate" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <!--        get asset record by current status = GET | access = ROLE_ADMIN and ROLE_EMPLOYEE only  -->
        <intercept-url pattern="/assetRecords" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>        
        <intercept-url pattern="/checkAssetAvailability" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/checkDuplicateStatus" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="search/assetRecords" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        
        <intercept-url pattern="/users/{id}" access="hasAnyRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/users" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/checkUserNameAvailability" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        <intercept-url pattern="/resetPassword/{id}" access="hasAnyRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/updatePassword" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE', 'ROLE_USER')"/>
        <intercept-url pattern="search/users" access="hasAnyRole('ROLE_ADMIN')"/>
        <intercept-url pattern="search/members" access="hasAnyRole('ROLE_ADMIN', 'ROLE_EMPLOYEE')"/>
        
    </http>
    <!-- #4 - Authentication Manager config -->
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!-- We use the dataSource defined in spring-persistence.xml -->
            <!-- and we give Spring Security the query to use to lookup -->
            <!-- the user’s credentials (get the password from the users -->
            <!-- tables and get the roles from the authorities table) -->
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query=
"select username, password, enabled from users where username=?"
                               authorities-by-username-query=
 "select username, authority from authorities where username=?"/>
        </authentication-provider>
    </authentication-manager>
</beans:beans>